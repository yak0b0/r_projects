ggplot(teams_above_50, aes(x = YEAR, y = perc_above_50)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "red", size = 2) +
geom_text(aes(label = sprintf("%.1f%%", perc_above_50)),
vjust = -0.8, size = 3) +
labs(
title = "Percentage of Teams with 2PT% > 50 by Season",
x = "Season (Year)",
y = "Percentage of Teams (%)"
) +
theme_minimal()
# Calculate percentage of teams above 50% each year
teams_above_50 <- data %>%
group_by(YEAR) %>%
summarise(
count_above_50 = sum(X2P_O > 50, na.rm = TRUE),
total_teams = n(),
.groups = "drop"
) %>%
mutate(perc_above_50 = (count_above_50 / total_teams) * 100)
# Plot percentage over time
ggplot(teams_above_50, aes(x = YEAR, y = perc_above_50)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "red", size = 2) +
geom_text_repel(aes(label = sprintf("%.1f%%", perc_above_50)), size = 4,nudge_y = 0,nudge_x = -0.8 ,direction = "both") +
labs(
title = "Percentage of Teams with 2PT% > 50 by Season",
x = "Season (Year)",
y = "Percentage of Teams (%)"
)+ scale_x_continuous(breaks = seq(min(teams_above_50$YEAR),max(teams_above_50$YEAR),by = 1))+
theme_classic()
data %>%
select_if(is.numeric) %>%
cor() %>%
ggcorrplot::ggcorrplot(hc.order = TRUE, type = 'lower',
method = 'square',
lab = T,
lab_size = 2,
colors = c("red","white","green"),
title = "Correlation matrix of the dataset",
ggtheme = ggplot2::theme_classic(),
tl.cex = 8,
tl.srt = 45
)
q <- ggplot(data, aes(x = W, y = X3P_O, color = factor(POSTSEASON))) +
geom_point(alpha = 0.7, size = 2) +
geom_hline(yintercept = 38, linetype = "dashed", color = "black", size = 1)+
labs(
title = "Wins vs. 3PT Shooting Percentage  ({closest_state})",
subtitle = "Season: {closest_state}",
x = "Wins (W)",
y = "3PT Shooting Percentage (X3P_O)",
color = "Postseason Stage"
) +
theme_classic() +
transition_states(YEAR, transition_length = 2, state_length = 5) +
ease_aes('linear')
animate(q,fps = 5, nframes = 300, width = 800, height = 600,units = "px", res = 72, renderer = gifski_renderer())
anim_save("wins_vs_ax3p_o.gif")
# Count teams above 38% by year
# Calculate percentage of teams above 50% each year
teams_above_50 <- data %>%
group_by(YEAR) %>%
summarise(
count_above_50 = sum(X3P_O > 38, na.rm = TRUE),
total_teams = n(),
.groups = "drop"
) %>%
mutate(perc_above_50 = (count_above_50 / total_teams) * 100)
# Plot percentage over time
ggplot(teams_above_50, aes(x = YEAR, y = perc_above_50)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "red", size = 2) +
geom_text_repel(aes(label = sprintf("%.1f%%", perc_above_50)), size = 4,nudge_y = 0,nudge_x = -0.8 ,direction = "both") +
labs(
title = "Percentage of Teams with 3PT% > 50 by Season",
x = "Season (Year)",
y = "Percentage of Teams (%)"
)+ scale_x_continuous(breaks = seq(min(teams_above_50$YEAR),max(teams_above_50$YEAR),by = 1))+
theme_classic()
data <- read.csv("cbb.csv")
#| label: packages
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(gganimate)
library(gifski)
library(magick)
library(knitr)
library(ggrepel)
glimpse(data) # rough summary of the data
colSums(is.na(data)) # cheking whether there are NA's in each column
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
view(table_df_postseason)
nrow(data['POSTSEASON'])
sum(table_df_postseason$Freq)
table_df_seed <- as.data.frame(table(data$SEED, useNA = "ifany"))
view(table_df_seed)
nrow(data['SEED'])
sum(table_df_seed$Freq)
data <- data %>%
mutate(POSTSEASON = replace_na(POSTSEASON, "N/A"),
SEED = replace_na(SEED, "N/A"))
table(data$SEED)
table(data$POSTSEASON)
data <- data %>%
mutate(POSTSEASON_NUM = case_when(
POSTSEASON == "Champions" ~ 1,
POSTSEASON == "2ND"       ~ 2,
POSTSEASON == "F4"        ~ 4,
POSTSEASON == "E8"        ~ 8,
POSTSEASON == "S16"       ~ 16,
POSTSEASON == "R32"       ~ 32,
POSTSEASON == "R64"       ~ 64,
POSTSEASON == "R68"       ~ 68,
POSTSEASON == "N/A"       ~ 400,
))
data %>%
select_if(is.numeric) %>%
cor() %>%
ggcorrplot::ggcorrplot(hc.order = TRUE, type = 'lower',
method = 'square',
lab = T,
lab_size = 2,
colors = c("red","white","green"),
title = "Correlation matrix of the dataset",
ggtheme = ggplot2::theme_classic(),
tl.cex = 8,
tl.srt = 45
)
cor_mat <- cor(data %>% select_if(is.numeric))
threshold <- 0.5
cor_mat[abs(cor_mat) < threshold] <- NA
ggcorrplot::ggcorrplot(cor_mat,
type = "lower",
method = "square",
lab = TRUE,
lab_size = 2.5,
colors = c("red","white","green"),
title = "Strong Correlations Only",
ggtheme = ggplot2::theme_classic())
ggplot(data, aes(x = W, y = ADJOE, color = factor(POSTSEASON)))+
geom_point(alpha = 0.6, size = 2)+
geom_smooth(method = "lm", color = "red", se = T)+
labs(
title = "Scatter plot of Wins vs. Adjusted Offensive Efficiency",
x = "Wins (W)",
y = "Adjusted Offensive Efficiency (ADJOE)",
color = "Postseason position"
)+
theme_classic()
p <- ggplot(data, aes(x = W, y = X2P_O, color = factor(POSTSEASON))) +
geom_point(alpha = 0.7, size = 2)+
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 1)+
labs(
title = "Wins vs. 2PT Shooting Percentage  ({closest_state})",
subtitle = "Season: {closest_state}",
x = "Wins (W)",
y = "2PT Shooting Percentage (X2P_O)",
color = "Postseason Stage"
) +
theme_classic() +
transition_states(YEAR, transition_length = 2, state_length = 5) +
ease_aes('linear')
animate(p,fps = 5, nframes = 300, width = 800, height = 600,units = "px", res = 72, renderer = gifski_renderer())
anim_save("wins_vs_ax2p_o.gif")
# Calculate percentage of teams above 50% each year
teams_above_50 <- data %>%
group_by(YEAR) %>%
summarise(
count_above_50 = sum(X2P_O > 50, na.rm = TRUE),
total_teams = n(),
.groups = "drop"
) %>%
mutate(perc_above_50 = (count_above_50 / total_teams) * 100)
# Plot percentage over time
ggplot(teams_above_50, aes(x = YEAR, y = perc_above_50)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "red", size = 2) +
geom_text_repel(aes(label = sprintf("%.1f%%", perc_above_50)), size = 4,nudge_y = 0,nudge_x = -0.8 ,direction = "both") +
labs(
title = "Percentage of Teams with 2PT% > 50 by Season",
x = "Season (Year)",
y = "Percentage of Teams (%)"
)+ scale_x_continuous(breaks = seq(min(teams_above_50$YEAR),max(teams_above_50$YEAR),by = 1))+
theme_classic()
q <- ggplot(data, aes(x = W, y = X3P_O, color = factor(POSTSEASON))) +
geom_point(alpha = 0.7, size = 2) +
geom_hline(yintercept = 38, linetype = "dashed", color = "black", size = 1)+
labs(
title = "Wins vs. 3PT Shooting Percentage  ({closest_state})",
subtitle = "Season: {closest_state}",
x = "Wins (W)",
y = "3PT Shooting Percentage (X3P_O)",
color = "Postseason Stage"
) +
theme_classic() +
transition_states(YEAR, transition_length = 2, state_length = 5) +
ease_aes('linear')
animate(q,fps = 5, nframes = 300, width = 800, height = 600,units = "px", res = 72, renderer = gifski_renderer())
anim_save("wins_vs_ax3p_o.gif")
# Count teams above 38% by year
# Calculate percentage of teams above 50% each year
teams_above_50 <- data %>%
group_by(YEAR) %>%
summarise(
count_above_50 = sum(X3P_O > 38, na.rm = TRUE),
total_teams = n(),
.groups = "drop"
) %>%
mutate(perc_above_50 = (count_above_50 / total_teams) * 100)
# Plot percentage over time
ggplot(teams_above_50, aes(x = YEAR, y = perc_above_50)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "red", size = 2) +
geom_text_repel(aes(label = sprintf("%.1f%%", perc_above_50)), size = 4,nudge_y = 0,nudge_x = -0.8 ,direction = "both") +
labs(
title = "Percentage of Teams with 3PT% > 38 by Season",
x = "Season (Year)",
y = "Percentage of Teams (%)"
)+ scale_x_continuous(breaks = seq(min(teams_above_50$YEAR),max(teams_above_50$YEAR),by = 1))+
theme_classic()
data <- data %>%
mutate(WIN_P = W/G)
view(sort(data$WIN_P, decreasing = T))
win_p_summary <- data %>%
group_by(WIN_P) %>%
summarise(n_teams = n(), .groups = "drop")
summary(data$WIN_P)
first_q <- 0.3871
third_q <- 0.6500
# Create plot
ggplot(win_p_summary, aes(x = WIN_P, y = n_teams)) +
geom_point(color = "#FF0066") +  # Use bars to show frequency
theme_classic() +
geom_vline(linetype = "dashed",color = "blue",xintercept = first_q)+
geom_vline(linetype = "dashed",color = "blue",xintercept = third_q)+
labs(x = "Win Percentage", y = "Number of Teams") +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
top_teams <- data %>%
filter( WIN_P >= 0.65) %>%
filter(WIN_P <= 1)
top_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_above_065 = sum(WIN_P >= 0.65, na.rm = TRUE),
.groups = "drop"
)
top_teams <- data %>%
filter( WIN_P >= 0.65) %>%
filter(WIN_P <= 1)
plot_teams_above_065 <- function(data, y_offset = 0.5, bar_color = "#FF0066", covid_year = 2020, covid_color = "gray50") {
top_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_above_065 = sum(WIN_P >= 0.65, na.rm = TRUE),
.groups = "drop"
)
if (!covid_year %in% top_teams$YEAR) {
top_teams <- rbind(top_teams, data.frame(YEAR = covid_year, count_above_065 = 0))
}
top_teams$fill_group <- factor(ifelse(top_teams$YEAR == covid_year, "COVID", "Other"))
ggplot(top_teams, aes(x = YEAR, y = count_above_065, fill = fill_group)) +
geom_col() +
geom_text(aes(label = count_above_065), vjust = -0.5, size = 3, color = "black") +
labs(title = "Number of teams above 0.65% WIN_P",
x = "Year",
y = "Number of teams",
caption = "2020 - 0, because of COVID-19") +
scale_x_continuous(breaks = seq(min(top_teams$YEAR), max(top_teams$YEAR), by = 1)) +
scale_fill_manual(values = c("COVID" = covid_color, "Other" = bar_color)) +
theme_classic() +
theme(legend.position = "none")
}
plot_teams_above_065(data)
team_counts_all <- data %>%
group_by(TEAM) %>%
summarise(count = n(), .groups = "drop")
team_counts_top <- top_teams %>%
group_by(TEAM) %>%
summarise(count = n(),
avg_postseason_finish = mean(POSTSEASON_NUM, na.rm = TRUE))
top_10_by_count <- team_counts_top %>%
arrange(desc(count)) %>%
head(10)
count_summary <- team_counts_top %>%
group_by(count) %>%
summarise(n_teams = n(), .groups = "drop")
ggplot(count_summary, aes(x = count, y = n_teams)) +
geom_col(fill = "#FF0066") +
geom_text(aes(label = n_teams), vjust = -0.5, size = 3, color = "black") +  # Add text labels
theme_classic() +
labs(x = "Count (Number of Appearances)", y = "Number of Teams") +
scale_x_continuous(breaks = unique(count_summary$count))
ggplot(top_10_by_count, aes(x = reorder(TEAM, avg_postseason_finish, decreasing = TRUE), y = avg_postseason_finish, fill = avg_postseason_finish))+
geom_col()+
geom_text(aes(label = round(avg_postseason_finish, 0)), vjust = -0.5, size = 3, color = "black") +
scale_fill_gradient(low = "green", high = "red") +
theme_classic() +
labs(title = "AVG postseason position", x = "Team", y = "AVG postseason position")+
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 7, color = "black"),
legend.position = "none"
)
summary(data$WIN_P)
plot_teams_below_039 <- function(data, y_offset = 0.5, bar_color = "#FF0066", covid_year = 2020, covid_color = "gray50") {
worst_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_below_039 = sum(WIN_P <= 0.3971, na.rm = TRUE),
.groups = "drop"
)
if (!covid_year %in% worst_teams$YEAR) {
worst_teams <- rbind(worst_teams, data.frame(YEAR = covid_year, count_below_039 = 0))
}
worst_teams$fill_group <- factor(ifelse(worst_teams$YEAR == covid_year, "COVID", "Other"))
ggplot(worst_teams, aes(x = YEAR, y = count_below_039, fill = fill_group)) +
geom_col() +
geom_text(aes(label = count_below_039), vjust = -0.5, size = 3, color = "black") +
labs(title = "Number of teams below 0.39% WIN_P",
x = "Year",
y = "Number of teams",
caption = "2020 - 0, because of COVID-19") +
scale_x_continuous(breaks = seq(min(top_teams$YEAR), max(worst_teams$YEAR), by = 1)) +
scale_fill_manual(values = c("COVID" = covid_color, "Other" = bar_color)) +
theme_classic() +
theme(legend.position = "none")
}
plot_teams_below_039(data)
team_counts_all <- data %>%
group_by(TEAM) %>%
summarise(count = n(), .groups = "drop")
team_counts_worst <- worst_teams %>%
group_by(TEAM) %>%
summarise(count = n(),
avg_postseason_finish = mean(POSTSEASON_NUM, na.rm = TRUE))
worst_10_by_count <- team_counts_worst %>%
arrange(count) %>%
head(10)
count_summary_worst <- team_counts_worst %>%
group_by(count) %>%
summarise(n_teams = n(), .groups = "drop")
ggplot(count_summary_worst, aes(x = count, y = n_teams)) +
geom_col(fill = "#FF0066") +
geom_text(aes(label = n_teams), vjust = -0.5, size = 3, color = "black") +  # Add text labels
theme_classic() +
labs(x = "Count (Number of Appearances)", y = "Number of Teams") +
scale_x_continuous(breaks = unique(count_summary$count))
worst_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_below_039 = sum(WIN_P <= 0.3971, na.rm = TRUE),
.groups = "drop"
team_counts_all <- data %>%
group_by(TEAM) %>%
summarise(count = n(), .groups = "drop")
team_counts_worst <- worst_teams %>%
group_by(TEAM) %>%
summarise(count = n(),
avg_postseason_finish = mean(POSTSEASON_NUM, na.rm = TRUE))
worst_10_by_count <- team_counts_worst %>%
arrange(count) %>%
head(10)
count_summary_worst <- team_counts_worst %>%
group_by(count) %>%
summarise(n_teams = n(), .groups = "drop")
ggplot(count_summary_worst, aes(x = count, y = n_teams)) +
geom_col(fill = "#FF0066") +
geom_text(aes(label = n_teams), vjust = -0.5, size = 3, color = "black") +  # Add text labels
theme_classic() +
labs(x = "Count (Number of Appearances)", y = "Number of Teams") +
scale_x_continuous(breaks = unique(count_summary$count))
worst_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_below_039 = sum(WIN_P <= 0.3971, na.rm = TRUE),
.groups = "drop"
team_counts_all <- data %>%
group_by(TEAM) %>%
summarise(count = n(), .groups = "drop")
team_counts_worst <- worst_teams %>%
group_by(TEAM) %>%
summarise(count = n(),
avg_postseason_finish = mean(POSTSEASON_NUM, na.rm = TRUE))
worst_10_by_count <- team_counts_worst %>%
arrange(count) %>%
head(10)
count_summary_worst <- team_counts_worst %>%
group_by(count) %>%
summarise(n_teams = n(), .groups = "drop")
ggplot(count_summary_worst, aes(x = count, y = n_teams)) +
geom_col(fill = "#FF0066") +
geom_text(aes(label = n_teams), vjust = -0.5, size = 3, color = "black") +  # Add text labels
theme_classic() +
labs(x = "Count (Number of Appearances)", y = "Number of Teams") +
scale_x_continuous(breaks = unique(count_summary$count))
worst_teams <- data %>%
group_by(YEAR) %>%
summarise(
count_below_039 = sum(WIN_P <= 0.3971, na.rm = TRUE),
.groups = "drop"
team_counts_all <- data %>%
group_by(TEAM) %>%
summarise(count = n(), .groups = "drop")
team_counts_worst <- worst_teams %>%
group_by(TEAM) %>%
summarise(count = n(),
avg_postseason_finish = mean(POSTSEASON_NUM, na.rm = TRUE))
worst_10_by_count <- team_counts_worst %>%
arrange(count) %>%
head(10)
count_summary_worst <- team_counts_worst %>%
group_by(count) %>%
summarise(n_teams = n(), .groups = "drop")
ggplot(count_summary_worst, aes(x = count, y = n_teams)) +
geom_col(fill = "#FF0066") +
geom_text(aes(label = n_teams), vjust = -0.5, size = 3, color = "black") +  # Add text labels
theme_classic() +
labs(x = "Count (Number of Appearances)", y = "Number of Teams") +
scale_x_continuous(breaks = unique(count_summary$count))
clear
clear()
view(table_df_postseason)
nrow(data['POSTSEASON'])
sum(table_df_postseason$Freq)
nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq)
view(table_df_seed)
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
view(table_df_postseason)
nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq) ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data$SEED, useNA = "ifany"))
view(table_df_seed)
nrow(data['SEED']) == sum(table_df_seed$Freq) ## checking whether the table has the correct amount of values
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
table_df_postseason
nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq) ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data$SEED, useNA = "ifany"))
table_df_seed
nrow(data['SEED']) == sum(table_df_seed$Freq) ## checking whether the table has the correct amount of values
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
table_df_postseason
nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq) ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data['SEED'], useNA = "ifany"))
table_df_seed
nrow(data['SEED']) == sum(table_df_seed$Freq) ## checking whether the table has the correct amount of values
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
table_df_postseason
if(nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq)){
cat("The table has the same amount of values as rows")
} ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data['SEED'], useNA = "ifany"))
table_df_seed
nrow(data['SEED']) == sum(table_df_seed$Freq) ## checking whether the table has the correct amount of values
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
table_df_postseason
if(nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq)){
cat("The table has the same amount of values as rows")
} ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data['SEED'], useNA = "ifany"))
table_df_seed
if(nrow(data['SEED']) == sum(table_df_seed$Freq)){
cat("The table has the same amount of values as rows")
} ## checking whether the table has the correct amount of values
table_df_postseason <- as.data.frame(table(data['POSTSEASON'], useNA = "ifany" ))
table_df_postseason
if(nrow(data['POSTSEASON']) == sum(table_df_postseason$Freq)){
cat("The table has the same amount of values as rows \n")
} ## checking whether the table has the correct amount of values
table_df_seed <- as.data.frame(table(data['SEED'], useNA = "ifany"))
table_df_seed
if(nrow(data['SEED']) == sum(table_df_seed$Freq)){
cat("The table has the same amount of values as rows")
} ## checking whether the table has the correct amount of values
data <- data %>%
mutate(POSTSEASON = replace_na(POSTSEASON, "N/A"),
SEED = replace_na(SEED, "N/A"))
table(data$SEED)
table(data$POSTSEASON)
data <- data %>%
mutate(POSTSEASON = replace_na(POSTSEASON, "N/A"),
SEED = replace_na(SEED, "N/A"))
table(data$POSTSEASON)
data <- data %>%
mutate(POSTSEASON_NUM = case_when(
POSTSEASON == "Champions" ~ 1,
POSTSEASON == "2ND"       ~ 2,
POSTSEASON == "F4"        ~ 4,
POSTSEASON == "E8"        ~ 8,
POSTSEASON == "S16"       ~ 16,
POSTSEASON == "R32"       ~ 32,
POSTSEASON == "R64"       ~ 64,
POSTSEASON == "R68"       ~ 68,
POSTSEASON == "N/A"       ~ 400,
))
data <- data %>%
mutate(WIN_P = W/G)
sort(data$WIN_P, decreasing = T)
data <- data %>%
mutate(WIN_P = W/G)
sort(data$WIN_P, decreasing = T) %>%
head(10)
ggplot(top_10_by_count, aes(x = reorder(TEAM, avg_postseason_finish, decreasing = TRUE), y = avg_postseason_finish, fill = avg_postseason_finish))+
geom_col()+
geom_text(aes(label = round(avg_postseason_finish, 0)), vjust = -0.5, size = 3, color = "black") +
scale_fill_gradient(low = "green", high = "red") +
theme_classic() +
labs(title = "AVG postseason position", x = "Team", y = "AVG postseason position")+
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 7, color = "black"),
legend.position = "none"
)
